# devtools::install_github('TravisPritchardODEQ/AWQMSdata', host = 'https://api.github.com', force = TRUE, upgrade='never')
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(tidyr)
library(htmltools)
library(knitr)
library(rmarkdown)
library(kableExtra)
library(RODBC)
library(RSQLite)
library(Rcpp)
# webshot::install_phantomjs()
# Inputs ----
start.date = "2000-01-01"
end.date = "2019-12-31"
web_output <- TRUE
top_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/2020'
gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
# gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# ----
complete.years <- c(as.integer(substr(start.date, start = 1, stop = 4)):as.integer(substr(end.date, start = 1, stop = 4)))
start_year <- min(complete.years)
end_year <- max(complete.years)
query_dates <- c(start.date, end.date)
# wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
HUC_shp <- rgdal::readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# tmdls <- sf::st_read(dsn = "//deqhq1/TMDL/Planning statewide/TMDL map/TMDL_Feature_gdb/TMDLs.gdb", layer = "allocations_watershed") %>% st_transform(4326)
# basin_shp <- readOGR(dsn = gis_dir, layer = 'TualatinJWC_DWSA_dissolve', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# HUC_shp <- HUC_shp[HUC_shp$REPORT != "Willamette",]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt', stringsAsFactors = FALSE)
missing_AUs <- NULL
wqp_stns <- NULL
state_param_sum_au <- data.frame()
state_param_sum_stn <- data.frame()
state_drop_summary <- NULL
state_status_reason <- NULL
state_target_data <- NULL
report_names <- sort(unique(HUC_shp$REPORT))
report_names
name <- "South Coast"
print(paste0("Creating parameter summary table for the ", name, " Basin..."))
data_dir <- paste0(top_dir,'/2020-', name)
if(dir.exists(data_dir)) {
} else {dir.create(data_dir)}
eval_date <- Sys.Date()
save(eval_date, file = paste0(data_dir, "/", name, "_eval_date.RData"))
basin_shp <- HUC_shp[HUC_shp$REPORT %in% name, ]
# print("Checking for TMDLs...")
# basin_tmdls <- tmdls[sf::st_intersects(tmdls, sf::st_transform(sf::st_as_sf(basin_shp), 4326)) %>% lengths > 0,]
# st_geometry(basin_tmdls) <- NULL
# basin_tmdls <- basin_tmdls[grep("tss|phosphorus|tp|solids", basin_tmdls$NPS2, ignore.case = TRUE),]
hucs <- unique(basin_shp$HUC_8)
stations_AWQMS <- odeqstatusandtrends::get_stations_AWQMS(basin_shp)
missing_AUs <- dplyr::bind_rows(missing_AUs, attr(stations_AWQMS, 'missing_AUs'))
stations_dropped <- dplyr::bind_rows(stations_AWQMS[,c("MLocID", "OrgID")], missing_AUs[,c("MLocID", "OrgID")])
stations_dropped$missing_au <- dplyr::if_else(stations_dropped$MLocID %in% missing_AUs$MLocID, TRUE, FALSE)
stations_wqp <- odeqstatusandtrends::get_stations_WQP(polygon = basin_shp, start_date = start.date, end_date = end.date,
huc8 = hucs, exclude.tribal.lands = TRUE)
# if(is.data.frame(stations_wqp) && nrow(stations_wqp) > 0){
#   print("Add these stations to the Stations Database:")
#   print(stations_wqp)
#   wqp_stns <- dplyr::bind_rows(wqp_stns, stations_wqp)
# } else {stations_wqp <- NULL}
if(file.exists(paste0(data_dir, "/", name, "_data_raw_", start.date, "-", end.date, ".RData"))){
load(paste0(data_dir, "/", name, "_data_raw_", start.date, "-", end.date, ".RData"))
} else {
data_raw <- odeqstatusandtrends::GetData(parameters = c("Temperature", "Bacteria", "TSS", "DO", "TP", "pH"),
stations_AWQMS = stations_AWQMS,
# stations_WQP = stations_wqp,
start.date = start.date,
end.date = end.date,
huc8 = hucs)
print(paste0("Saving raw data from query..."))
data_raw[, c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", 141:149)] <-
stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("StationDes", "HUC8", "HUC8_Name", "HUC10", "HUC12", "HUC12_Name",
"Lat_DD", "Long_DD", "Reachcode", "Measure", "AU_ID", "FishCode", "SpawnCode", "WaterTypeCode",
"WaterBodyCode", "BacteriaCode", "DO_code", "ben_use_code", "pH_code", "DO_SpawnCode")]
data_raw$Datum <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("Datum")]
data_raw$ELEV_Ft <- stations_AWQMS[match(data_raw$MLocID, stations_AWQMS$MLocID),
c("ELEV_Ft")]
save(data_raw, file = paste0(data_dir, "/", name, "_data_raw_", start.date, "-", end.date, ".RData"))
}
stations_AWQMS$AU_Name <- au_names[match(stations_AWQMS$AU_ID, au_names$AU_ID), c("AU_Name")]
stations_dropped$no_data <- dplyr::if_else(!stations_dropped$MLocID %in% unique(data_raw$MLocID) & !stations_dropped$missing_au, TRUE, FALSE)
# Clean data and add criteria ---------------------------------------------
data_dropped <- NULL
data_clean <- odeqstatusandtrends::CleanData(data_raw)
drop_summary <- merge(stations_dropped, data_dropped, by = c("MLocID"), all = TRUE)
state_drop_summary <- dplyr::bind_rows(state_drop_summary, drop_summary)
save(drop_summary, file = paste0(data_dir, "/", name, "_drop_summary.RData"))
# add geoID
# add TMDL ID
rm(list = ls()[ls() %in% c("basin_shp", "data_raw", "drop_summary")])
gc()
# Assess various parameters -----------------------------------------------
data_assessed <- NULL
status <- NULL
excur_stats <- NULL
stat_summary <- NULL
trend <- NULL
data_clean$Spawn_type <- NA
status_reason <- NULL
any(unique(data_clean$Char_Name) %in% odeqstatusandtrends::AWQMS_Char_Names('pH'))
print("Assessing pH...")
data_pH <- data_clean %>% dplyr::filter(Char_Name == "pH")
data_pH <- odeqstatusandtrends::add_criteria(data_pH)
data_pH <- odeqassessment::Censored_data(data_pH, criteria = 'pH_Min')
data_pH <- odeqassessment::pH_assessment(data_pH)
data_pH$status_period <- odeqstatusandtrends::status_periods(datetime = data_pH$sample_datetime,
periods=4,
year_range = c(start_year,end_year))
data_assessed <- dplyr::bind_rows(data_assessed, data_pH)
df=data_pH
if(is.null(df)) {
warning("There are no results in df.")
status_check <- "No stations meet criteria"
return(status_check)
}
if(!"status_period" %in% colnames(df)) {
stop("There is no 'status_period' column defined in df. Run odeqstatusandtrends::status_period().")
}
if(any(is.na(df$status_period))) {
warning("NA's present in 'status_period' column.")
}
if(!"MLocID" %in% colnames(df)) {
stop("There is no 'MLocID' column defined in df.")
}
if(!"Char_Name" %in% colnames(df)) {
stop("There is no 'Char_Name' column defined in df.")
}
if(!"Result_Numeric" %in% colnames(df)) {
stop("There is no 'Result_Numeric' column defined in df.")
}
if(!"excursion_cen" %in% colnames(df)) {
stop("There is no 'excursion_cen' column defined in df.")
}
if(!"BacteriaCode" %in% colnames(df)) {
stop("There is no 'BacteriaCode' column defined in df.")
}
any(!unique(df$Char_Name) %in% c("Dissolved oxygen (DO)", "pH"))
unique(df$Char_Name)
if(any(!unique(df$Char_Name) %in% c("Dissolved oxygen (DO)", "pH"))){
status_check <- df %>%
dplyr::filter(!(BacteriaCode == 3 & Char_Name == "Fecal Coliform"),
!Char_Name %in% c("Dissolved oxygen (DO)", "pH")) %>%
dplyr::group_by(MLocID, Char_Name, status_period) %>%
dplyr::summarise(samples = n(),
status = dplyr::if_else(samples < 1 | is.na(samples) | all(is.na(excursion_cen)),
"Unassessed",
dplyr::if_else(any(excursion_cen == 1, na.rm = TRUE),
"Not Attaining",
"Attaining")
),
reason = dplyr::if_else(status == "Unassessed",
dplyr::if_else(any(excursion_cen == 2),
"no_results",
if_else(all(is.na(excursion_cen)),
"no_target",
"no_results")
),
NA_character_)
) %>%
dplyr::ungroup() %>%
dplyr::select(-samples)
status_reason <<- bind_rows(status_reason, filter(status_check, status == "Unassessed"))
status_check <- status_check %>%
select(-reason) %>%
tidyr::pivot_wider(names_from = status_period, values_from = status)
} else {status_check <- NULL}
any(df$BacteriaCode == 3 & df$Char_Name == "Fecal Coliform")
if(any(df$BacteriaCode == 3 & df$Char_Name == "Fecal Coliform")){
shell_status <- df %>%
dplyr::filter(BacteriaCode == 3,
Char_Name == "Fecal Coliform") %>%
dplyr::group_by(MLocID, Char_Name, status_period) %>%
dplyr::summarise(samples = n(),
median = dplyr::if_else(samples >= 5, median(Result_cen, na.rm = TRUE), NaN),
excursions = sum(perc_exceed),
bact_crit_percent = dplyr::first(bact_crit_percent), # 43 organisms per 100mL, requires 10% exceedance
bact_crit_ss = dplyr::first(bact_crit_ss), # 14 organisms per 100mL, median used to evaluate excursion
# n_years = length(unique(year)),
excursion = dplyr::if_else((!is.na(median) & median > bact_crit_ss),
1,
dplyr::if_else(samples >= 10 & excursions/samples > 0.10,
1,
dplyr::if_else(samples >= 5 & samples <= 9 & excursions > 1,
1, 0)
)),
status = dplyr::if_else(samples < 1 | is.na(samples) | all(is.na(excursion)),
"Unassessed",
dplyr::if_else(any(excursion == 1, na.rm = TRUE),
"Not Attaining",
"Attaining")
),
reason = dplyr::if_else(status == "Unassessed",
dplyr::if_else(samples < 5,
"less_than_5_samples",
if_else(all(is.na(excursion)),
"no_target",
"no_results")
),
NA_character_)
) %>%
dplyr::ungroup() %>%
dplyr::select(MLocID, Char_Name, status_period, status, reason)
if(nrow(status_reason) > 0){
status_reason <<- dplyr::bind_rows(status_reason, shell_status)
}
shell_status <- shell_status %>%
select(-reason) %>%
tidyr::pivot_wider(names_from = status_period, values_from = status)
if(nrow(shell_status) >0){
status_check <- dplyr::bind_rows(status_check, shell_status)
}
}
any(unique(df$Char_Name) %in% c("Dissolved oxygen (DO)", "pH"))
status_check_DO_pH <- df %>%
dplyr::filter(Char_Name %in% c("Dissolved oxygen (DO)", "pH"))
status_check_DO_pH <- df %>%
dplyr::filter(Char_Name %in% c("Dissolved oxygen (DO)", "pH")) %>%
dplyr::group_by(MLocID, Char_Name, status_period)
status_check_DO_pH <- df %>%
dplyr::filter(Char_Name %in% c("Dissolved oxygen (DO)", "pH")) %>%
dplyr::group_by(MLocID, Char_Name, status_period) %>%
dplyr::summarise(samples = n(),
n_excursion = sum(excursion_cen, na.rm = TRUE),
binomial_excursions = odeqassessment::excursions_req(samples),
per_exceed = dplyr::if_else(samples >= 5 & n_excursion > binomial_excursions,
1, 0),
status = dplyr::if_else(samples < 5 | is.na(samples) | all(is.na(excursion_cen)),
"Unassessed",
dplyr::if_else(per_exceed == 1,
"Not Attaining",
"Attaining")
),
reason = dplyr::if_else(status == "Unassessed",
dplyr::if_else(samples < 5,
"no_results",
if_else(all(is.na(excursion_cen)),
"no_target",
"no_results")
),
NA_character_)
)
View(status_check_DO_pH)
status_check_DO_pH <- df %>%
dplyr::filter(Char_Name %in% c("Dissolved oxygen (DO)", "pH")) %>%
dplyr::group_by(MLocID, Char_Name, status_period) %>%
dplyr::summarise(samples = n(),
n_excursion = sum(excursion_cen, na.rm = TRUE),
binomial_excursions = odeqassessment::excursions_req(samples),
per_exceed = dplyr::if_else(samples >= 5 & n_excursion > binomial_excursions,
1, 0),
status = dplyr::if_else(samples < 5 | is.na(samples) | all(is.na(excursion_cen)),
"Unassessed",
dplyr::if_else(per_exceed == 1,
"Not Attaining",
"Attaining")
),
reason = dplyr::if_else(status == "Unassessed",
dplyr::if_else(samples < 5,
"no_results",
if_else(all(is.na(excursion_cen)),
"no_target",
"no_results")
),
NA_character_)
) %>%
dplyr::ungroup() %>%
dplyr::select(-samples)
View(status_check_DO_pH)
status_reason <<- bind_rows(status_reason, filter(status_check_DO_pH, status == "Unassessed"))
View(status_reason)
status_check_DO_pH <- status_check_DO_pH %>%
select(-reason)
View(status_check_DO_pH)
status_check_DO_pH <- df %>%
dplyr::filter(Char_Name %in% c("Dissolved oxygen (DO)", "pH")) %>%
dplyr::group_by(MLocID, Char_Name, status_period) %>%
dplyr::summarise(samples = n(),
n_excursion = sum(excursion_cen, na.rm = TRUE),
binomial_excursions = odeqassessment::excursions_req(samples),
per_exceed = dplyr::if_else(samples >= 5 & n_excursion > binomial_excursions,
1, 0),
status = dplyr::if_else(samples < 5 | is.na(samples) | all(is.na(excursion_cen)),
"Unassessed",
dplyr::if_else(per_exceed == 1,
"Not Attaining",
"Attaining")
),
reason = dplyr::if_else(status == "Unassessed",
dplyr::if_else(samples < 5,
"no_results",
if_else(all(is.na(excursion_cen)),
"no_target",
"no_results")
),
NA_character_)
) %>%
dplyr::ungroup() %>%
dplyr::select(-samples, -n_excursion, -binomial_excursions, -per_exceed)
status_reason <<- bind_rows(status_reason, filter(status_check_DO_pH, status == "Unassessed"))
status_check_DO_pH <- status_check_DO_pH %>%
select(-reason) %>%
tidyr::pivot_wider(names_from = status_period, values_from = status)
View(status_check_DO_pH)
library(readxl)
library(ggplot2)
library(dplyr)
library(ggstance)
data <- readxl::read_xlsx("E:/Data Requests/TSS Oct Apr WY 9803 WY1318.xlsx")
data <- data %>% dplyr::filter(!is.na(Location))
colnames(data) <- gsub(" ", "_", colnames(data))
data$Location <- stringr::str_wrap(data$Location, width = 35)
data$Location <- factor(data$Location, levels = unique(data$Location))
data$WY_Range <- gsub("13-18", "2013-2018", data$WY_Range)
data$WY_Range <- gsub("98-03", "1998-2003", data$WY_Range)
data$WY_Range <- factor(data$WY_Range, levels = c("1998-2003", "2013-2018"))
p_main <- ggplot(data %>% dplyr::filter(Type == "Mainstem Tualatin")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
# theme_light() +
ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), scales = "free")
p_main <- ggplot(data %>% dplyr::filter(Type == "Mainstem Tualatin")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
# theme_light() +
# ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), scales = "free")
p_main
p_main <- ggplot(data %>% dplyr::filter(Type == "Mainstem Tualatin")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
ggtitle("Mainstem Tualatin") +
# theme_light() +
# ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), scales = "free")
p_main
ggsave(plot = p_main, filename = "E:/Data Requests/tualatin_tss_boxplot_mainstem.png",
width = 18, height = 10)
unique(data$Type)
p_trib <- ggplot(data %>% dplyr::filter(Type == "Tributaries")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
ggtitle("Tributaries") +
# theme_light() +
# ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), cols = vars(Type), scales = "free")
p_trib
ggsave(plot = p_no_out, filename = "E:/Data Requests/tualatin_tss_boxplot_tributaries.png",
width = 18, height = 10)
p_main <- ggplot(data %>% dplyr::filter(Type == "Mainstem Tualatin")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
ggtitle("Mainstem Tualatin") +
# theme_light() +
# ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), scales = "free_x")
p_main
ggsave(plot = p_main, filename = "E:/Data Requests/tualatin_tss_boxplot_mainstem.png",
width = 18, height = 10)
p_trib <- ggplot(data %>% dplyr::filter(Type == "Tributaries")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
ggtitle("Tributaries") +
# theme_light() +
# ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), cols = vars(Type), scales = "free_x")
p_trib
p_trib <- ggplot(data %>% dplyr::filter(Type == "Tributaries")) +
geom_boxplot(aes(x = Location, y = TSS, color = WY_Range)) +
ylab("Total Suspended Solids (mg/L)") +
xlab("") +
labs(color = "Water Year") +
ggtitle("Tributaries") +
# theme_light() +
ylim(0, 400) +
theme(axis.text.x = element_text(angle = 60,
# vjust = 0.5,
hjust=1,
size = 8),
axis.title.y =  element_text(margin = margin(r = 10)),
legend.position = "top") +
facet_grid(rows = vars(Month_Range), cols = vars(Type), scales = "free_x")
p_trib
ggsave(plot = p_no_out, filename = "E:/Data Requests/tualatin_tss_boxplot_tributaries.png",
width = 18, height = 10)
ggsave(plot = p_trib, filename = "E:/Data Requests/tualatin_tss_boxplot_tributaries.png",
width = 18, height = 10)
devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com', force = TRUE, upgrade='never')
devtools::install_github('donco/odeqassessment', host = 'https://api.github.com', force = TRUE, upgrade='never')
devtools::install_github('donco/odeqtmdl', host = 'https://api.github.com', force = TRUE, upgrade='never')
source('//deqhq1/WQNPS/Status_and_Trend_Reports/Report_Files/st_report_files/state_param_summary2.R')
source('//deqhq1/WQNPS/Status_and_Trend_Reports/Report_Files/st_report_files/xlsx_outputs.R')
source('//deqhq1/WQNPS/Status_and_Trend_Reports/Report_Files/st_report_files/statewide_plotting2.R')
library(devtools)
library(rgdal)
#library(RODBC)
library(dplyr)
# devtools::install_github('donco/odeqstatusandtrends', host = 'https://api.github.com', force = TRUE, upgrade='never')
library(odeqstatusandtrends)
# devtools::install_github('donco/odeqassessment', host = 'https://api.github.com', force = TRUE, upgrade='never')
library(odeqassessment)
# devtools::install_github('donco/odeqtmdl', host = 'https://api.github.com', force = TRUE, upgrade='never')
library(odeqtmdl)
# devtools::install_github('rmichie/wqdb/wqdb', host = 'https://api.github.com', force = TRUE, upgrade='never')
# library(wqdb)
# devtools::install_github('rmichie/owri/owri', host = 'https://api.github.com', upgrade='never')
library(owri)
# devtools::install_github('TravisPritchardODEQ/AWQMSdata', host = 'https://api.github.com', force = TRUE, upgrade='never')
library(AWQMSdata)
library(dataRetrieval)
library(ggplot2)
library(lubridate)
library(pbapply)
library(tidyr)
library(htmltools)
library(knitr)
library(rmarkdown)
library(kableExtra)
library(RODBC)
library(RSQLite)
library(Rcpp)
# webshot::install_phantomjs()
# Inputs ----
start.date = "2000-01-01"
end.date = "2019-12-31"
web_output <- TRUE
top_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/2020'
gis_dir <- '//deqhq1/WQNPS/Status_and_Trend_Reports/GIS'
# gis_dir <- '//deqhq1/dwp-public/SpecialProjects/NRCS_NWQI'
# ----
complete.years <- c(as.integer(substr(start.date, start = 1, stop = 4)):as.integer(substr(end.date, start = 1, stop = 4)))
start_year <- min(complete.years)
end_year <- max(complete.years)
query_dates <- c(start.date, end.date)
# wq_db <- paste0(project_dir, name,"_data_raw_",paste0(query_dates, collapse = "."),".db")
# support_files_dir <- "//deqhq1/GISLIBRARY/Base_Data/Hydrography/Watershed_Boundaries/WBD_OR.gdb/WBD_OR.gdb/WBD_OR"
HUC_shp <- rgdal::readOGR(dsn = gis_dir, layer = 'Report_Units_HUC08', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# tmdls <- sf::st_read(dsn = "//deqhq1/TMDL/Planning statewide/TMDL map/TMDL_Feature_gdb/TMDLs.gdb", layer = "allocations_watershed") %>% st_transform(4326)
# basin_shp <- readOGR(dsn = gis_dir, layer = 'TualatinJWC_DWSA_dissolve', integer64="warn.loss", verbose = FALSE, stringsAsFactors = FALSE)
# HUC_shp <- HUC_shp[HUC_shp$REPORT != "Willamette",]
au_names <- read.csv('//deqhq1/WQNPS/Status_and_Trend_Reports/Lookups_Statewide/AssessmentUnits_OR_Dissolve.txt', stringsAsFactors = FALSE)
missing_AUs <- NULL
wqp_stns <- NULL
state_param_sum_au <- data.frame()
state_param_sum_stn <- data.frame()
state_drop_summary <- NULL
state_status_reason <- NULL
state_target_data <- NULL
report_names <- sort(unique(HUC_shp$REPORT))
#name <- "Willamette"
#name <- "Owyhee"
odeqstatusandtrends::st_report(format = "word_document", table_format = "pandoc", file_name = "Oregon_SandT_report",
rmd_dir = "N:/Status_and_Trend_Reports/Report_Files/st_report_files",
out_dir = "N:/Status_and_Trend_Reports/2020/Statewide Report")
